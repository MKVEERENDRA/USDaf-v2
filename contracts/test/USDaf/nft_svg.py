import base64
import json
import os

input_data = """data:application/json;base64,"""

if not input_data.startswith("data:application/json;base64,"):
    raise ValueError("Input is not a valid base64-encoded JSON URI")

json_base64 = input_data.split(",", 1)[1]
json_bytes = base64.b64decode(json_base64)
metadata = json.loads(json_bytes)

image_data = metadata["image"]
if not image_data.startswith("data:image/svg+xml;base64,"):
    raise ValueError("Image field is not a base64-encoded SVG")

svg_base64 = image_data.split(",", 1)[1]
svg_str = base64.b64decode(svg_base64).decode("utf-8")

output_path = os.path.join(os.path.dirname(__file__), "test.svg")
with open(output_path, "w", encoding="utf-8") as f:
    f.write(svg_str)